import{Connect as x}from"./index-BljXXSHi.js";import{g as C}from"./CanvasUtils-naQ4Jb_L.js";import{i as R,g,d as P}from"./ColorUtils-Cn7nrMWp.js";import{i as S}from"./NumberUtils-fSLHzFkB.js";import{E as O}from"./ExternalInteractorBase-CIi3zRdK.js";import{j as k}from"./Utils-B52he1Wb.js";import"./index-Di2UWVEq.js";import"./TypeUtils-BOyOcFPO.js";const y=0,p=1,w=0;function D(e,t,n,o){const i=Math.floor(n.getRadius()/t.getRadius()),s=t.getFillColor(),r=n.getFillColor();if(!s||!r)return;const d=t.getPosition(),a=n.getPosition(),l=R(s,r,t.getRadius(),n.getRadius()),c=e.createLinearGradient(d.x,d.y,a.x,a.y);return c.addColorStop(y,g(s,o)),c.addColorStop(S(i,y,p),P(l,o)),c.addColorStop(p,g(r,o)),c}function E(e,t,n,o,i){C(e,o,i),e.lineWidth=t,e.strokeStyle=n,e.stroke()}function F(e,t,n,o){const i=e.actualOptions,s=i.interactivity.modes.connect;if(s)return D(t,n,o,s.links.opacity)}function H(e,t,n){e.canvas.draw(o=>{const i=F(e,o,t,n);if(!i)return;const s=t.getPosition(),r=n.getPosition();E(o,t.retina.linksWidth??w,i,s,r)})}const L="connect",v=0;class z extends O{constructor(t){super(t)}clear(){}init(){const t=this.container,n=t.actualOptions.interactivity.modes.connect;n&&(t.retina.connectModeDistance=n.distance*t.retina.pixelRatio,t.retina.connectModeRadius=n.radius*t.retina.pixelRatio)}interact(){const t=this.container;if(t.actualOptions.interactivity.events.onHover.enable&&t.interactivity.status==="pointermove"){const o=t.interactivity.mouse.position,{connectModeDistance:i,connectModeRadius:s}=t.retina;if(!i||i<v||!s||s<v||!o)return;const r=Math.abs(s),d=t.particles.quadTree.queryCircle(o,r,a=>this.isEnabled(a));d.forEach((a,l)=>{const c=a.getPosition(),M=1;for(const u of d.slice(l+M)){const f=u.getPosition(),m=Math.abs(i),h=Math.abs(c.x-f.x),b=Math.abs(c.y-f.y);h<m&&b<m&&H(t,a,u)}})}}isEnabled(t){const n=this.container,o=n.interactivity.mouse,i=((t==null?void 0:t.interactivity)??n.actualOptions.interactivity).events;return i.onHover.enable&&o.position?k(L,i.onHover.mode):!1}loadModeOptions(t,...n){t.connect||(t.connect=new x);for(const o of n)t.connect.load(o==null?void 0:o.connect)}reset(){}}export{z as Connector};
